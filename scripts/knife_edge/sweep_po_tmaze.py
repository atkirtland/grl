import matplotlib as mpl
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import seaborn as sns
from tqdm import tqdm
import jax
from jax.config import config

from grl.environment import load_pomdp
from grl.utils.loss import discrep_loss
from grl.utils.policy_eval import analytical_pe

#%%

mpl.rcParams.update({
    "text.usetex": True,
    "font.family": "serif",
    "font.serif": ["Computer Modern Roman"],
    "font.sans-serif": ["Computer Modern Sans serif"],
    "font.monospace": ["Computer Modern Typewriter"],
    "axes.labelsize": 12,  # LaTeX default is 10pt
    "font.size": 12,
    "legend.fontsize": 12,
    "xtick.labelsize": 12,
    "ytick.labelsize": 12,
})
np.set_printoptions(precision=8)

spec = 'tmaze_5_two_thirds_up'
seed = 42

np.set_printoptions(precision=8, suppress=True)
config.update('jax_platform_name', 'cpu')
config.update("jax_enable_x64", True)

rand_key = None
np.random.seed(seed)
rand_key = jax.random.PRNGKey(seed)

pomdp, pi_dict = load_pomdp(spec, rand_key)
pomdp.gamma = 0.9999999
up_prob = 2/3

if 'Pi_phi' in pi_dict and pi_dict['Pi_phi'] is not None:
    pi = pi_dict['Pi_phi'][0]
    # print(f'Pi_phi:\n {pi_phi}')
    pi_phi = pomdp.get_ground_policy(pi)
    pi_phi = np.array([
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [0., 0., 1., 0.],
       [up_prob, 1-up_prob, 0., 0.],
       [up_prob, 1-up_prob, 0., 0.],
       [1., 0., 0., 0.]])

phi = pomdp.phi
pomdp_phi = np.concatenate([
    phi[:,:3],
    np.zeros((15, 9)),
    phi[:,-2:-1],
    np.zeros((15, 1)),
    phi[:, -1:]], axis=-1)
mdp_phi = np.eye(15)

pomdp_phi_single = np.array([
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_block = np.array([
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_uniform = np.ones_like(mdp_phi) / 15

pomdp_phi_junction = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_junction_single = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_hallway_start = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0.,.25,.25,.25,.25, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0.,.25,.25,.25,.25, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0.,.25,.25,.25,.25, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0.,.25,.25,.25,.25, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_hallway_end = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0.,.25,.25,.25,.25, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0.,.25,.25,.25,.25, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0.,.25,.25,.25,.25, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0.,.25,.25,.25,.25, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_blue_red = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., .5, .5, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., .5, .5, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., .5, .5, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., .5, .5, 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., .5, .5, 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., .5, .5, 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_hallway_4_5 = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., .5, 0., .5, 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., .5, 0., .5, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., .5, 0., .5, 0., 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., .5, 0., .5, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

x = 0.2
pomdp_phi_hallway_alt = np.array([
    [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
    [0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0., 0.],
    [0., 0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0.],
    [0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0., 0.],
    [0., 0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0.],
    [0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0., 0.],
    [0., 0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0.],
    [0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0., 0.],
    [0., 0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0.],
    [0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0., 0.],
    [0., 0., 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0.,  x, 0., 0., 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., .5, .5, 0.],
    [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_hallway_all = np.array([
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., .1, .1, .1, .1, .1, .1, .1, .1, .1, .1, 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_hallway_single = np.array([
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])

pomdp_phi_single_fixed = np.array([
       [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,],
       [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.,],
       [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.,]])

#%%
po_types = {
    # 'block': pomdp_phi_block,
    # 'hallway-alt': pomdp_phi_hallway_alt,
    'Corridor': pomdp_phi_hallway_single,
    'Junction': pomdp_phi_junction_single,
    # 'junction_b': pomdp_phi_junction,
    # 'hallway-start': pomdp_phi_hallway_start,
    # 'hallway-end': pomdp_phi_hallway_end,
    # 'hallway blue/red': pomdp_phi_blue_red,
    # 'hallway 4th/5th': pomdp_phi_hallway_4_5,
    'Both': pomdp_phi_single,
    # 'single (fixed)': pomdp_phi_single_fixed,
}

lds = []
ps = np.linspace(0, 1, 500)
for p in tqdm(ps):
    for po_type, phi in po_types.items():
        try:
            pomdp.phi = p * phi + (1-p) * mdp_phi
            pi = pi_phi
        except ValueError:
            pomdp.phi = p * phi + (1-p) * np.concatenate([mdp_phi, np.zeros((15,2))], axis=-1)
            pi = np.concatenate([pi_phi, np.array([[0, 0, 1, 0], [up_prob, 1-up_prob, 0, 0]])], axis=0)
        state_vals, mc_vals, td_vals, info = analytical_pe(pi, pomdp)
        lds.append({'p': p, 'ld': discrep_loss(pi, pomdp, alpha=0, error_type='max')[0].item(), 'Aliasing Type': po_type})

    # pomdp.phi = p * pomdp_phi_single + (1-p) * mdp_phi
    # state_vals, mc_vals, td_vals, info = analytical_pe(pi_phi, pomdp)
    # lds.append({'p': p, 'ld': discrep_loss(pi_phi, pomdp, alpha=0)[0].item(), 'Aliasing Type': 'unique'})
    #
    # pomdp.phi = p * pomdp_phi_uniform + (1-p) * mdp_phi
    # state_vals, mc_vals, td_vals, info = analytical_pe(pi_phi, pomdp)
    # lds.append({'p': p, 'ld': discrep_loss(pi_phi, pomdp, alpha=0)[0].item(), 'Aliasing Type': 'junction'})

data = pd.DataFrame(lds)

fig = plt.figure(figsize=(12, 3))

# Create the left plot (occupying the left half of the figure)
ax = plt.subplot2grid((1, 6), (0, 1), rowspan=1, colspan=2, fig=fig)
sns.lineplot(data=data, x='p', y='ld', hue='Aliasing Type', ax=ax)
# ax.set_ylabel(r"$\Lambda$")
ax.set_xlabel(r"Mixing Parameter ($p$)")
ax.set_ylabel("")
ax.set_title(r'Lambda Discrepancy ($\Lambda_\pi^{0,1}$)')
# ax.semilogy()

# Create the observation model plots
ax = plt.subplot2grid((1, 6), (0, 0), fig=fig)
ax.imshow(mdp_phi, vmin=0, vmax=1)
ax.set_title('No Aliasing')
ax.set_xlabel('Observation')
ax.set_ylabel('State')
ax.set_xticks(range(0, 15, 3))
ax.set_yticks(range(0, 15, 3))

ax.text( 7, 22, r'$\Phi_\mathrm{Perfect}$', ha='center', va='top')

# ax = plt.subplot2grid((1, 6), (0, 3), fig=fig)
# ax.imshow(pomdp_phi_hallway_alt, vmin=0, vmax=1)
# ax.set_title('Hallway-alt observations')

# ax = plt.subplot2grid((1, 6), (0, 4), fig=fig)
# ax.imshow(pomdp_phi_block, vmin=0, vmax=1)
# ax.set_title('Block observations')

ax = plt.subplot2grid((1, 6), (0, 5), fig=fig)
ax.imshow(pomdp_phi_single, vmin=0, vmax=1)
ax.set_title('Both Aliased')
ax.set_xlabel('Observation')
ax.set_ylabel('State')
ax.set_xticks(range(0, 15, 3))
ax.set_yticks(range(0, 15, 3))

ax = plt.subplot2grid((1, 6), (0, 4), fig=fig)
ax.imshow(pomdp_phi_junction_single, vmin=0, vmax=1)
ax.set_title('Junction Aliased')
ax.set_xlabel('Observation')
ax.set_ylabel('State')
ax.set_xticks(range(0, 15, 3))
ax.set_yticks(range(0, 15, 3))

ax.text( 7, 22, r'$\Phi_\mathrm{Aliased}$', ha='center', va='top')

# ax = plt.subplot2grid((1, 6), (2, 3), fig=fig)
# ax.imshow(pomdp_phi_blue_red, vmin=0, vmax=1)
# ax.set_title('Blue/red aliasing')

# ax = plt.subplot2grid((1, 6), (2, 4), fig=fig)
# ax.imshow(pomdp_phi_hallway_4_5, vmin=0, vmax=1)
# ax.set_title('Hallway-4th/5th aliasing')

# ax = plt.subplot2grid((1, 6), (1, 2), fig=fig)
# ax.imshow(pomdp_phi_hallway_start, vmin=0, vmax=1)
# ax.set_title('Hallway-start aliasing')

ax = plt.subplot2grid((1, 6), (0, 3), fig=fig)
ax.imshow(pomdp_phi_hallway_single, vmin=0, vmax=1)
ax.set_title(r'Corridor Aliased')
ax.set_xlabel(r'Observation')
ax.set_ylabel('State')
ax.set_xticks(range(0, 15, 3))
ax.set_yticks(range(0, 15, 3))

# ax = plt.subplot2grid((1, 6), (2, 0), rowspan=1, colspan=2, fig=fig)
# for po_type in po_types.keys():
#     ld = data.query(f'po_type=="{po_type}"').ld.to_numpy()
#     ax.plot(ps[1:], (ld[1:] - ld[:-1])/(ps[1]-ps[0]), label=po_type)
# ax.hlines(0, ps[0], ps[-1], 'k', ls='--')
# # ax.set_ylim([-0.001, 0.001])
# ax.set_ylabel(r"$\nabla_p\ \Lambda$")
# ax.set_xlabel(r'Partial Observability ($p$)')
# ax.set_yscale('symlog', linthresh=0.0001)

plt.tight_layout()
plt.savefig('tmaze_po_sweep.png')
plt.show()
